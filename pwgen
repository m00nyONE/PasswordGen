#!/bin/bash

################################
# PasswordGen script for Linux #
# by m00ny		       #
################################

# Default PARAMETERS
amount=1
length=8
filename=/tmp/passlist.txt
RAND=0
INF=0

# trap ctrl-c and call ctrl_c() for safety reasons. especialy in infinity mode
trap ctrl_c INT
ctrl_c()
{
	if [ "$filename" != "/tmp/passlist.txt" ] # check if the default was changed and copy the passlist.txt to the directory/file given in $filename
	then # cp /tmp/passlist.txt $filename
			 cat /tmp/passlist.txt >> $filename
	fi

	rm -f /tmp/passlist.txt # delete the tempfile

    exit 0
}

# Print the help screen
printhelp()
{
	printf 'pwgen 1.1\n\n'
	printf 'EXAMPLES:'
	printf "\tgenerate 1 password with a length of 8:\n\t\033[1;34m pwgen \033[0m"
	printf "\tgenerate 10 passwords with a length of 8:\n\t\033[1;34m pwgen -l 8 -a 10 -o passlist.txt \033[0m\n"
	printf 'PARAMETERS:'
	printf '\t-h \t shows this screen\n'
	printf '\t\t ### required: ###'
	printf '\t-l \t defines the length of the generated passord(s) \t\t- default = 8'
	printf '\t-a \t defines the amount of generated passwords \t\t\t- default = 1\n'
	printf '\t\t ### optional: ###'
	printf '\t-o \t defines the file the password(s) will be saved in \t- default = none'
	printf '\t-c \t defines the charset to use //NOT IMPLEMENTED YET'
	printf "\t-rand \t the length will be generated automatically between 8-16 chars"
	printf "\t-inf \t this will infinitly generate passwords - use with -o ! otherwise, the passwords will be lost"
	printf "\t-update  updates the programm and installs it to /usr/sbin/"
	printf "\t-install same as -update"
	exit 0
}

# this function is just looping the passgen over and over
infgen()
{
	while [ "$INF" == "1" ];
	do
	passgen $length 1
	done
}

# write the generated passwords to console
printpw()
{
	cat /tmp/passlist.txt
}

#update script
update()
{
	git clone https://github.com/m00nyONE/PasswordGen /tmp/PasswordGen
	chmod +x /tmp/PasswordGen/pwgen
	echo -e "\033[1;34m pwgen will be installed to /usr/sbin \033[0m"
	sudo chown root:root /tmp/PasswordGen/pwgen
	sudo cp -rf /tmp/PasswordGen/pwgen /usr/sbin/pwgen
	rm -rf /tmp/PasswordGen
	echo "pwgen successfully updated!"
	exit 0
}

# main password generation function
passgen()
{
  a=0
	while [ "$INF" != "0" ]; # this loop is just for the infinity process
	do
		for i in ${seq 1 $amount} # run a sequence until the given amount is reached && it saves the passwords to the temp file
		do
			if [ "$RAND" == "1" ]; # check if the length should be random or not // if so, generate a length between 8 and 16 (common password length )
			then
				length=$(shuf -i 8-16 -n 1)
			fi

			strings /dev/urandom|grep -o '[[:alnum:]=@!#+*~<>|\"รยง$%&/(),.;:_-]'|head -n $length|tr -d '\n' # catch the given charset out of the /dev/urandom
			echo ""
		done >> /tmp/passlist.txt # the generated passwords into a temporary file for easier handling and use
		printpw # display the passwords in the terminal
	done

	if [ "$filename" != "/tmp/passlist.txt" ] # check if the default was changed and copy the passlist.txt to the directory/file given in $filename
	then cat /tmp/passlist.txt >> $filename
	fi

	rm -rf /tmp/passlist.txt # delete the tempfile

	exit 0
}

# default generation without parameters
if [ $# -eq 0 ];
then passgen $length $amount
fi

# check for parameters and set them
while [[ $# -gt 0 ]]
do
key="$1"
	case $key in
		-h|--help) printhelp ;;
		-o|--output) filename="$2" ; shift;;
		-a|--amount) amount="$2" ; shift ;;
		-l|--length) length="$2" ; shift ;;
		-rand|--random) RAND="1" ;;
		-inf|--infinite) INF="1"; amount="1";;
		-c|--charset) echo "not implemented yet!"	;;
    		-update|-install) update ;;
    		*) printhelp ;;
	esac
shift
done

passgen $length $amount
exit 0
